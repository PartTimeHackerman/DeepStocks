import com.moowork.gradle.node.task.NodeTask

dependencies {

    compile project(':Model')

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile("org.springframework.boot:spring-boot-starter-actuator")

    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile("org.springframework.boot:spring-boot-devtools")

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.12'

    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: '1.4.193'


    //compile('org.springframework.boot:spring-boot-starter-tomcat‌​')

    //providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    //compile("org.springframework.boot:spring-boot-starter-data-jpa")

    //compile("org.springframework.boot:spring-boot-starter-thymeleaf")
}

buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE")
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
//apply plugin: 'spring-boot'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: "com.moowork.node"

node {
    version = '5.8.0'
    npmVersion = '3.8.0'
    download = true
    // distBaseUrl = Custom artifactory location here.
}

war {
    baseName = 'webpack-gradle'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    providedRuntime
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    def osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        script = project.file('node_modules/webpack/bin/webpack.js')
    } else {
        script = project.file('node_modules/.bin/webpack')
    }
}

processResources.dependsOn 'webpack'

clean.delete << file('node_modules')
clean.delete << file('src/main/webapp/dist')